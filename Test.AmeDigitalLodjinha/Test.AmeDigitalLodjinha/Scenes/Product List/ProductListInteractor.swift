//
//  ProductListInteractor.swift
//  Test.AmeDigitalLodjinha
//
//  Created by Leandro Romano on 22/06/19.
//  Copyright (c) 2019 Leandro Romano. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductListBusinessLogic {
    
    var numberOfRows: Int { get }
    
    func setupTitleWithCategoryName()
    func setupLoadingState()
    func requestProductsByCategory()
    func cellForRow(at index: Int) -> ProductViewModel
    func didSelect(at index: Int)
    
}

protocol ProductListDataStore {
    var category: CategoryModel? { get set }
    var product: ProductModel? { get }
}

class ProductListInteractor: ProductListBusinessLogic, ProductListDataStore {

    var presenter: ProductListPresentationLogic?
    var worker: ProductListWorker?
    var category: CategoryModel?
    var products: [ProductModel]?
    var product: ProductModel?
    
    init(worker: ProductListWorker = ProductListWorker()) {
        self.worker = worker
    }
    
    var numberOfRows: Int {
        return products?.count ?? 0
    }
    
    func setupTitleWithCategoryName() {
        if let category = category {
            presenter?.presentTitleWithCategory(name: category.description)
        }
    }
    
    func setupLoadingState() {
        presenter?.presentLoadingState()
    }
    
    func requestProductsByCategory() {
        if let category = category {
            worker?.getProductsByCategory(id: category.id, offset: 0, limit: 20)
                .done(handleRequestSuccess)
                .catch(handleRequestError)
        }
    }
    
    func handleRequestSuccess(_ response: ProductList.Response) {
        products = response.data
        
        if numberOfRows == 0 {
            presenter?.presentEmptyState()
        } else {
            presenter?.presentFilledState()
        }
        
        presenter?.presentDynamicData()
    }
    
    func handleRequestError(_ error: Error) {
        presenter?.presentRequestError(error)
    }
    
    func cellForRow(at index: Int) -> ProductViewModel {
        guard let product = products?[index] else { fatalError("Invalid index for products array.") }
        return ProductViewModel(product: product)
    }
    
    func didSelect(at index: Int) {
        product = products?[index]
        presenter?.presentProductDetails()
    }

}
