//
//  ProductListViewController.swift
//  Test.AmeDigitalLodjinha
//
//  Created by Leandro Romano on 22/06/19.
//  Copyright (c) 2019 Leandro Romano. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductListDisplayLogic: class {
    func displayTitleWithCategory(name categoryName: String)
    func displayLoadingState()
    func displayEmptyState()
    func displayDynamicData()
    func displayRequestError(message: String)
}

class ProductListViewController: UIViewController {

    var interactor: ProductListBusinessLogic?
    var router: (NSObjectProtocol & ProductListRoutingLogic & ProductListDataPassing)?

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    private func setup() {
        let viewController = self
        let interactor = ProductListInteractor()
        let presenter = ProductListPresenter()
        let router = ProductListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableview()
        setupView()
    }
    
    @IBOutlet weak var productsTableView: UITableView!
    
    private func setupTableview() {
        productsTableView.tableFooterView = UIView()
        productsTableView.register(
            UINib(nibName: String(describing: ProductTableViewCell.self), bundle: nil),
            forCellReuseIdentifier: CellsIdentifiers.productCell.rawValue
        )
    }
    
    private func setupView() {
        interactor?.setupTitleWithCategoryName()
        interactor?.setupLoadingState()
        interactor?.requestProductsByCategory()
    }
    
}

extension ProductListViewController: ProductListDisplayLogic {
    
    func displayTitleWithCategory(name categoryName: String) {
        title = categoryName
    }
    
    func displayLoadingState() {
        let loadingStateLabel = UILabel()
        loadingStateLabel.text = "Carregando..."
        loadingStateLabel.textColor = .darkGray
        loadingStateLabel.textAlignment = .center
        loadingStateLabel.font = UIFont.systemFont(ofSize: 16.0, weight: .medium)
        loadingStateLabel.numberOfLines = 0
        productsTableView.backgroundView = loadingStateLabel
    }
    
    func displayEmptyState() {
        let loadingStateLabel = UILabel()
        loadingStateLabel.text = "Nenhum produto foi encontrado para essa categoria.\nPor favor, tente novamente."
        loadingStateLabel.textColor = .darkGray
        loadingStateLabel.textAlignment = .center
        loadingStateLabel.font = UIFont.systemFont(ofSize: 16.0, weight: .medium)
        loadingStateLabel.numberOfLines = 0
        productsTableView.backgroundView = loadingStateLabel
    }
    
    func displayDynamicData() {
        DispatchQueue.main.async {
            self.productsTableView.reloadData()
        }
    }
    
    func displayRequestError(message: String) {
        let alert = UIAlertController(title: Constants.productListErrorTitle, message: Constants.productListErrorMessage, preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: Constants.productListErrorCloseActionMessage, style: .default, handler: { _ in
            self.navigationController?.popToRootViewController(animated: true)
        }))
        present(alert, animated: true)
    }
    
}

extension ProductListViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return interactor?.numberOfRows ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let viewModel = interactor?.cellForRow(at: indexPath.row) else { fatalError("Nullable Interactor.") }
        return ProductTableViewCellSetup.setup(tableView: tableView, indexPath: indexPath, viewModel: viewModel)
    }
    
}
