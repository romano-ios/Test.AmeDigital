//
//  HomeInteractor.swift
//  Test.AmeDigitalLodjinha
//
//  Created by Leandro Romano on 14/06/19.
//  Copyright (c) 2019 Leandro Romano. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic {
    func setNavigationLogoView()
    func setBannersContentLoading()
    func getBannersContent()
    
    func getBestSellers()
    func cellForBestSellerRow(at index: Int) -> BestSellerViewModel
    var numberOfBestSellerRows: Int { get }
}

protocol HomeDataStore {
    //var name: String { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    
    var presenter: HomePresentationLogic?
    var worker: HomeWorker?
    var bestSellers = [BestSellerViewModel]()
    
    init(worker: HomeWorker = HomeWorker()) {
        self.worker = worker
    }
    
    func setNavigationLogoView() {
        presenter?.presentNavigationLogo()
    }
    
    func setBannersContentLoading() {
        presenter?.presentBannersLoading()
    }
    
    func getBannersContent() {
        worker?.getBanners().done(handleGetBannersSuccess).catch(handleGetBannersError)
    }
    
    func handleGetBannersSuccess(_ response: Home.Banner.Response) {
        presenter?.presentBanners(response: response)
    }
    
    func handleGetBannersError(_ error: Error) {
        presenter?.presentBannersError(error)
    }
    
    func getBestSellers() {
        worker?.getBestSellers().done(handleGetBestSellersSuccess).catch(handleGetBestSellersError)
    }
    
    func handleGetBestSellersSuccess(_ response: Home.BestSeller.Response) {
        self.bestSellers = response.data.map { BestSellerViewModel(bestSeller: $0) }
        presenter?.presentNewData()
    }
    
    func handleGetBestSellersError(_ error: Error) {
        //
    }
    
    var numberOfBestSellerRows: Int {
        return self.bestSellers.count
    }
    
    func cellForBestSellerRow(at index: Int) -> BestSellerViewModel {
        return self.bestSellers[index]
    }

}
